Next, sticking with our some amazing package for humans, let's look at Records.
Records is also by Kenneth Reitz and I chose his work because I really admire him and I think it brings a great simplicity and powerfulness all together at the same time.
So here we have a thing called Records, it's an improvement on the built in DB API that lets you query databases in a really nice way, see it supports things like Postgres, MySql, SQL Server, Oracle and so on.
So let's go see how we use this to access to the simple little database.
Now here I have a little bit of starter code and we are going to go, let's just look at this little support file, it's going to go and find this demo_db.sqlite and it's going to generate a connection string to that file.
And if we look what's in here, let's go over here, you can see there is some ids, x y and values.
And so what I want to do is do a query based on this value, so I want to find all the measurements that have a value greater than 0.9, 0.95 and so on.
So how do we do that? Well, I've already installed Records, here you can see Records and hey we have the latest version, cool, but again we could go install it from PyPi, with pip or with PyCharm, so we'll say "import records", and the way we get started is we create a database and we give it the connection string, like so, and then we say "db.query()" over here and we just give it some SQL.
Remember the tagline, "just write SQL", so we are going to come over here and we are going to do a query, now what I am going to write would normally just be a string, this is SQL embedded in Python, so there is no less support for whatever that means anyway, but because PyCharm over here has this database registered when I drag it across like that, watch what happens, this is, I'll never get tired of seeing this, so if I type "SELECT" it's going to start to think oh, maybe you are writing a database query, not yet, if I say "* FROM", now it has, OK, we have two of these databases active so "SELECT * FROM" and now notice how I got syntax highlighting inside the string and now as I hit space I actually get completion on the column, so we get id and value, x and y, I want to say "where the value is > than 0.9", so there is a query, that's pretty easy, now let's loop over it, so "for r in" and let's just print it out to see what the heck came back here, so if I run this, there, you can see we got our records back from the database, and notice there is a bunch and they are not quite ordered the way I'd like, so let's say "ORDER BY value DESC", how easy is that? Connection string, create a database, create a query, done.
And notice, we can come out if we just want to print the value, these have access to all the values, if I want to get just say the top 3 highest measurements or let's say top 5, we can use slicing, right on the results, boom, there is the top 5, beautiful.
So again, here is how you use Records, one import statement, create the database, run the query, done.
3 lines of code including the import and connecting to the database.
Again, just another example of how important it is to look around at what's available when you are working with Python apps, there is so much out there, one of the biggest challenges is actually finding it, hopefully, you are inspired to look around by some of these examples.
All right so the final takeaway of this whole section is: "It is Pythonic to leverage PyPi and open source more than it is to implement the coolest clever algorithm on your own code, and keep it private."