Tuples play a central role in Python, we are going to look at variety of techniques and ways to use tuples that are particularly Pythonic, let's start with assignment and unpacking, and we'll start in code.
So, you probably know that tuples are defined like this, so it could be a number, another number, a string, even be like an array.
So if we wanted to just look at the our little creation here, we can go like this, we'll see that it's actually not the parentheses that have anything to do with this, usually, we could just as well write like this, and we get the same output, it's the commas, not the parentheses that make the tuple.
In fact, we can come down here and can have a shorter one, like this, sometimes you want to have a tuple with just one element in it, we could write this, there is a tuple of length 1, let's find out.
There, a tuple of length 1.
So that tuples, they can't grow after they are created, they are basically immutable objects that it can be added to or moved, things like that.
So that's not the Pythonic thing, that's just tuples.
We get values out of them like this, if we wanted to say print out the word "cat" that's in the second index position, zero-based, so there we'd print "cat", if we didn't actually do this, there that prints "cat", so the first thing we want to look at is unpacking these into variables, let's go over here and work with the shorter version, so let's suppose we had the number 7 and the word "cat" and that was all, if I want to have 2 variables, one for the number and one for the...
let's say animal, I could say "n for number = this" and I could say "a for animal = that", that would not be Pythonic, instead, what you would say is "n, a = t", and Python will unpack the first value into the first thing here, the second value into the second thing there, and so on.
Now, if we had another one, like another number here, and we try to run this, you'll see it crashes because it says too many values, so if we are doing that we would typically say I don't care what this value is and use an underscore to say "please ignore it", so let's run that.
And PyCharm is just saying "look you assign these values and you never use them here", so let's do this.
Now, maybe we should show you what numbers came out or what values came out of there, so we'll say like so, "n is 7", "a is cat", beautiful.
And underscore, well we could grab it but we don't care, that's the whole point of it.
So this concept lets us assign values in a single line so I could say "x, y = 1, 2", then I could print "x" and "y" and I would get 1 and 2.
Finally, this tuple unpacking is a very important when we are talking about loops, remember our numerical "for...in" loop where it gives us both index and the item, we wrote something like this: "for index, item in enumerate", something like this, for enumerating over a collection, we'll get the index and the item, so 0 had 1, "cat" and so on, there, 0 goes to 1, 2 goes to "cat", well this returns a tuple and we unpack them into index and item, so this tuple unpacking is super important and we'll see more of it as we go through this chapter.
So we saw we can create a tuple, we can unpack it into a variety of values, should we have a tuple of 4 values, we unpack it into greeting and one into enclosing, then we just print them out, you see the values come out as if they had been pulled out individually, we also saw that enumerate returns tuples and the way that we actually separate the values in a really nice clean way maybe didn't even notice this one has happened is we are actually using tuple unpacking into those two items as it comes back from enumerate.