All right, this next tip or technique I want to show you might almost be considered anti-Pythonic.
Let's look at the Zen of Python and see what it says.
So, recall the Zen of Python says "special cases aren't special enough to break the rules", so that leads to a really clean and simple and easy to understand language, often with one way to do things instead of three or four, that's awesome.
However, it also says "practicality beats purity", so let me give you a heavy dose of practicality involving dictionaries, and memory in Python.
So here is the server memory process for the web servers of this company called oyster.com, they do like hotel booking and that kind of stuff.
They wrote a nice blog post about it we'll look at it in a second.
They were storing a lot of stuff in memory, cached, using Python objects, they used this concept of slots which we are going to talk about to go and save 9GB of RAM on their server, and it literally just took one line of code.
This will give us a chance to look inside at the backing store for custom objects, which normally is a really good thing to have, but every now and then can be trouble as you can see here.
So we are over here in Windows 10, and this is oyster.com, you can see it's all about booking hotels that have been checked out by real people, sounds cool.
Here is their blog post talking about how they used slots on this image class that they cache heavily.
Let's go and look at this in a different example that I have created for you in PyCharm.
We are over here in Windows 10 because the tools to look at the process details and understand its memory usage and CPU usage are really great on Windows.
So we are going to work with four types holding the same information, we are going to have a tuple which holds four values, they are unnamed, we are going to have a thing called an ImmutableThingTuple, we are using this name tuple to create it, has values a, b, c and d, we are going to have a regular class, a plain little class that has four values a, b, c and d, storing those on its instance, and we are going to use slots with this what - we are calling an immutable thing, it's a little bit wrong, it's immutable and that it can't have new attributes but the values a, b, c and d, those can change.
By adding the slots here, what we are going to do is, remember, every normal object has a dictionary backing store, and so if I look at "self.__dict__", you would see that it had four entries, a, b, c and d and the values would be whatever the values of a, b, c and d were passed in.
Each instance of mutable thing has its own separate copy of the dictionary, which means it has its own separate copy of the keys as well.
On the other hand, this one when you define slots, it says look, this type holds four and exactly four things with this name and we can put the storage of those slots into the type, which is a singleton, instead of two the instance variables which they are maybe millions.
So, let's look at the code below where we created a bunch of these and we look at the memory pressure and behavior of the different items.
So notice, we have one million items we are going to work with, we want to put them into this list.
What we are going to do, we are going to time every one of these operations the same, we are going to choose one of the four options, loop 1, loop 2, loop 3 or loop 4.
Loop 1 is going to use straight regular tuples and it's going to allocate inline a tuple with four values, n+1, n+2, n+3, n+4 and it's going to put it into our list.
So here we have in memory one million of these tuples, we are going to determine how long that's going to take, here we see "Finished, waiting...
done in" a certain amount of time and this is an input call so it's going to block.
The reason it blocks is I want to process to stay alive so we can go look at its memory graph before it exits.
OK, so you just hit Enter to exit; first, we are going to run this for tuples.
Here you can see it took about half a second, paste it over here so that we can see what the relative performance was, and let's run process explorer, which lets us look down here at the details.
So here is Python, you can see, if we open this up we've got a performance graph, right now it's using a 145.7 MB in private bytes.
So we'll note that here.
Let's run named tuples.
So it's an interesting question to ask, if these absolute bare minimum tuples that can't expand, don't have names, things like that, how do they compare both in performance and memory of our named tuple that we created up here above, like so, using our collections.name tuple.
All right, let's run and see how it works.
OK, well, that is slower, let's go ahead and copy that and put it in our little document here, so it's about three times slower, as you would expect, it's doing quite a bit more work to parse those and so on, let's look at the memory here, the memory is about the same, 143.3 MB, so no big deal.
Let's move down the line here and run it for a standard class, so this one is probably going to have the least good performance from a memory perspective, because remember, every instance could have been modified dynamically at runtime, to have new attributes and so on, so they all have their own dictionary.
Let's give it a shot and find out what happens.
In terms of speed, it's almost identical to named tuples, that's cool, what about memory- wow, memory is little more, like almost a 100 MB more, so 241 MB.
All right, here is where it's going to get interesting, if we run slots, we would expect it to take more time, it's doing comparable stuff to what those two were taking.
However, the memory story should be pretty interesting, let's see what it is, how close is it going to be say to the class versus the named tuple versus the regular tuple.
All right, let's let it go and see what happens.
Timewise, faster than name tuples, that's cool, now let's go look at the memory.
Look at that, 139.3 MB, that's pretty interesting, 139.3 MB, not only does this completely, completely do better than regular classes, it actually does better than named tuples and it even does better than regular tuples so we get the best memory usage using the slots here, and we save 101 MB so that's a huge improvement, now let's go look back our type here.
Remember, regular tuples are very useful but they are very inflexible, they would not be a good stand-in for a class, most of the time.
Named tuples are better, at least they have names for their properties.
So like if I had one here, a, b, c and d and so on, that's cool, but again, they can't have methods and whatnot, on the far other end of the spectrum, we have regular custom classes that are extremely rich, properties, methods, inheritance, overloads and so on, but this one pays a huge price, so what is interesting is we can get basically all those features except the ability to dynamically add fields to instances at runtime after we create them.
if we are willing to give up that thing, we can get huge memory improvements while still keeping all of the flexibility in power of classes.
Now, I want to take a moment and just say do not do this by default, this is not the Pythonic thing to do, this is not how Python is meant to work, it's suppose to work in this nice flexible dynamic way, but understanding how the memory works in these types, and the ability to take control over that and change it, when you need it, when you can say "I can put this one line here", and we need to save 9 GB of RAM on our server, we can do way more processing or manage for your servers, that's a huge win, and it may be worth it.
So, this may or may not be Pythonic, I'll leave that up to you but I thought it was interesting to put it in here into this dictionary section because it makes a big difference and on one hand you say "what you are doing is kind of an abomination against the class", on the other- instead of being forced to use regular tuples, you can actually use rich types and even get better memory usage.
So, you decide, but it's good to know about.
Here is how you do it, you just set a __slots__ and set it to the name of the fields that you are going to use, here we say a, b and c, and henceforth, the only fields that you can have on this immutable thing are a, b and c if you end it __init__ tying to take a "d" and say "self.d =" something else they would crash and say no, you cannot add a "d", it takes "a, b" and "c".
So very strict about the variables it can have but once you do this, it changes the way the memory works behind the scenes for the class.
One more time, use this extremely sparingly but it's a nice power to have if you need it.