So in some sense we saw that range gives us a kind of a numerical "for" loop and that lets us walk through numbers from some starting point to some ending point, evenly incrementing them, continuously by the same amount.
If you actually want to get items out of a collection, if you are going to emulate that original "for" loop where you say "I am going to get the index and then index into some kind of collection like a list or something", still, don't do that, don't do that with the range, there is yet a better way.
So sometimes you want the item and you need the index at which that item comes from, suppose you are making like an ordered list type thing, item number 1 is this, item number 2 is that and so on, that might look kind of like this fake "for" loop up here, right, so we create the index, we do the loop based on the index, we get the value and we print out the index and value.
We can use a really cool combination of tuple unpacking and a special type of iterable that we can work with, so simulate this in a much more Pythonic way, so if we wanted to write this code we could write something like "for", let me just suspend what goes here for a minute, "something in" we can say "enumerate" and when you enumerate some kind of collection like in this case we'll enumerate "data", so what actually comes out is a tuple of 2 items, first the index and then the value for that part, to the loop, so we can unpack that in two variables right here, index and value and then we can do whatever we are going to do, here we said something like this: "we'll print out the index and the value", there you have it, if we are going to make this sort of ordered list style, you might put a "+1" here, item 1 goes to 1, item 2 is 7, item 3 is 11.
There, that's the Pythonic way to do numerical "for" loops.
So we saw that range works for just walking through a set of numbers, but if you actually want to get the items and the numbers, or items and the indexes rather, use enumerate and unpack the tuple into the indexing value and it can't be easier.