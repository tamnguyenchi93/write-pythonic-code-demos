Another way to add flexibility to functions is to allow you to pass a variable number or maybe more correctly an arbitrary number of parameters to it.
So let's look at that in this case of the silly function I wrote called biggest, so "biggest" will take two numbers, any really two comparables and tell you which one is bigger, so like biggest of 1 and 7, surprise, it's 7.
Let's go look at this in code.
Here we have the same thing as on our slides, if we run this, you can see still 7 is bigger than 1, hasn't changed.
Cool, but what if we want to have more than 1 argument, what if we wanted to somehow, let's go in and write the code what if we wanted to say the biggest of 1 and 7 and 42 and 99 and -1 and 11; what if I wanted to write that code? Well, if I try it's obviously not going to love it because it says it took two positional parameters I was given 6, not a good deal, so we can use convention here in Python called *args, so star, args is the convention, * (star) is the keyword or the language feature, that says this thing is going to accept an arbitrary number of parameters, the x means first it means you have to supply at least one but you may supply more, so let's first of all just print out what is this args and what is it and let's comment that out for a moment, if I try this again, you can see that I was given a tuple 7, 42 and so on, if we look here, that's the remainder after the x.
So let's go write the code that actually does the biggest part here, there, that seems like a reasonable implementation, we'll start out assuming the one that we have is the biggest and we'll go through everything that was passed to us as many arguments, zero or more that you give us and we'll check, well is this one bigger, if it is we'll set that one to be the result.
So what should the answer be at the end? 99 of course.
Boom, and it is.
So here is another Pythonic way to add flexibility to your methods, in a graphic, we saw we had this limited version that could compare two things, using *args we were able to upgrade it to take an arbitrary number of items and we saw that the thing that's passed in the args is actually a tuple and we just loop over it or do whatever you want to do with the tuple of additional parameters.